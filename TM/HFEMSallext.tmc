%{ /* edf2ext.awk reading HFEMSall.cdf */
  #include "csv_file.h"
  #include "msg.h"
  #include "tmctime.h"

  #define Ct24_Long(x) (0xFFFFFF & *(TMLONG *)&x)
  #define Ct24_Double(x) (double)Ct24_Long(x)
  #define To_Double(x) (double)(x)

  static double ext_delta = 0.;

  csv_file sonic1("sonic1.csv", 7, "-9999");
  csv_file sonic2("sonic2.csv", 7, "-9999");
  csv_file eddy1("eddy1.csv", 3, "-9999");
  csv_file eddy2("eddy2.csv", 3, "-9999");
  csv_file eddyO3("eddyO3.csv", 2, "-9999");
  csv_file counts("counts.csv", 4, "-9999");
  csv_file status("status.csv", 7, "-9999");
  csv_file pressures("pressures.csv", 9, "-9999");
  csv_file flows("flows.csv", 17, "-9999");
  csv_file profile("profile.csv", 4, "-9999");
  csv_file radiation("radiation.csv", 10, "-9999");
  csv_file RH("RH.csv", 11, "-9999");
  csv_file tair("tair.csv", 12, "-9999");
  csv_file troom("troom.csv", 4, "-9999");
  csv_file tsoil("tsoil.csv", 12, "-9999");
  csv_file tcells("tcells.csv", 5, "-9999");
  csv_file cpu("cpu.csv", 4, "-9999");
  csv_file setpt("setpt.csv", 17, "-9999");
  void initialize(void) {
    {
      char *s;
      s = getenv("EXT_DELTA");
      if (s != NULL) {
        ext_delta=atof(s);
        msg(MSG, "Using Time Delta of %lf", ext_delta);
      }
    }
    sonic1.init();
    sonic1.init_col(0, "Time", "%.3lf");
    sonic1.init_col(1, "ueddy1");
    sonic1.init_col(2, "veddy1");
    sonic1.init_col(3, "weddy1");
    sonic1.init_col(4, "Teddy1");
    sonic1.init_col(5, "sdev_stale1");
    sonic1.init_col(6, "sdrv_stale1");
    sonic2.init();
    sonic2.init_col(0, "Time", "%.3lf");
    sonic2.init_col(1, "ueddy2");
    sonic2.init_col(2, "veddy2");
    sonic2.init_col(3, "weddy2");
    sonic2.init_col(4, "Teddy2");
    sonic2.init_col(5, "sdev_stale2");
    sonic2.init_col(6, "sdrv_stale2");
    eddy1.init();
    eddy1.init_col(0, "Time", "%.2lf");
    eddy1.init_col(1, "vCO2e1", "%.4lf");
    eddy1.init_col(2, "vH2Oe1", "%.4lf");
    eddy2.init();
    eddy2.init_col(0, "Time", "%.2lf");
    eddy2.init_col(1, "vCO2e2", "%.4lf");
    eddy2.init_col(2, "vH2Oe2", "%.4lf");
    eddyO3.init();
    eddyO3.init_col(0, "Time", "%.2lf");
    eddyO3.init_col(1, "vO3ed", "%.4lf");
    counts.init();
    counts.init_col(0, "Time", "%.3lf");
    counts.init_col(1, "NOx");
    counts.init_col(2, "NOy");
    counts.init_col(3, "CtStat");
    status.init();
    status.init_col(0, "Time", "%.1lf");
    status.init_col(1, "DSt0", "%3.0f");
    status.init_col(2, "DSt1", "%3.0f");
    status.init_col(3, "DSt4", "%3.0f");
    status.init_col(4, "DSt5", "%3.0f");
    status.init_col(5, "Dst6", "%3.0f");
    status.init_col(6, "SolSt");
    pressures.init();
    pressures.init_col(0, "Time", "%.1lf");
    pressures.init_col(1, "Pamb");
    pressures.init_col(2, "Pman");
    pressures.init_col(3, "PrCO2p");
    pressures.init_col(4, "PrNOx");
    pressures.init_col(5, "PrNOy");
    pressures.init_col(6, "PrCO2e1");
    pressures.init_col(7, "PrCO2e2");
    pressures.init_col(8, "PrCO");
    flows.init();
    flows.init_col(0, "Time", "%.1lf");
    flows.init_col(1, "FlowT", "%.4lf");
    flows.init_col(2, "FlCO2p", "%.4lf");
    flows.init_col(3, "FlNOx", "%.4lf");
    flows.init_col(4, "FlO3_NOx", "%.4lf");
    flows.init_col(5, "fcNO_NOx", "%.4lf");
    flows.init_col(6, "fcNO2_NOx", "%.4lf");
    flows.init_col(7, "FlNOy", "%.4lf");
    flows.init_col(8, "fcNO_NOy", "%.4lf");
    flows.init_col(9, "fcEff_NOy", "%.4lf");
    flows.init_col(10, "fcZer_NOy", "%.4lf");
    flows.init_col(11, "FlO3_NOy", "%.4lf");
    flows.init_col(12, "FlCO2e1", "%.4lf");
    flows.init_col(13, "FlCO2e2", "%.4lf");
    flows.init_col(14, "FlCO2e3", "%.4lf");
    flows.init_col(15, "fc_CO2e", "%.4lf");
    flows.init_col(16, "FlCO", "%.4lf");
    profile.init();
    profile.init_col(0, "Time", "%.1lf");
    profile.init_col(1, "vCO2prf", "%.4lf");
    profile.init_col(2, "vO3prf", "%.4lf");
    profile.init_col(3, "vCO", "%.4lf");
    radiation.init();
    radiation.init_col(0, "Time", "%.1lf");
    radiation.init_col(1, "Rnet", "%.4lf");
    radiation.init_col(2, "PPFD_top", "%.4lf");
    radiation.init_col(3, "PPFD_mid", "%.4lf");
    radiation.init_col(4, "PPFD_gnd", "%.4lf");
    radiation.init_col(5, "PPFD_ref", "%.4lf");
    radiation.init_col(6, "PPFD_t", "%.4lf");
    radiation.init_col(7, "PPFD_d", "%.4lf");
    radiation.init_col(8, "Rnet_cal", "%.4lf");
    radiation.init_col(9, "PPFD_cal", "%.4lf");
    RH.init();
    RH.init_col(0, "Time", "%.1lf");
    RH.init_col(1, "RH1");
    RH.init_col(2, "RH2");
    RH.init_col(3, "RH3");
    RH.init_col(4, "RH4");
    RH.init_col(5, "RH5");
    RH.init_col(6, "RH6");
    RH.init_col(7, "RH7");
    RH.init_col(8, "RH8");
    RH.init_col(9, "RH9");
    RH.init_col(10, "RH10");
    tair.init();
    tair.init_col(0, "Time", "%.1lf");
    tair.init_col(1, "Ta1", "%.4lf");
    tair.init_col(2, "Ta2", "%.4lf");
    tair.init_col(3, "Ta3", "%.4lf");
    tair.init_col(4, "Ta4", "%.4lf");
    tair.init_col(5, "Ta5", "%.4lf");
    tair.init_col(6, "Ta6", "%.4lf");
    tair.init_col(7, "Ta7", "%.4lf");
    tair.init_col(8, "Ta8", "%.4lf");
    tair.init_col(9, "Ta9", "%.4lf");
    tair.init_col(10, "Ta10", "%.4lf");
    tair.init_col(11, "Tcal", "%.4lf");
    troom.init();
    troom.init_col(0, "Time", "%.1lf");
    troom.init_col(1, "Tr1", "%.4lf");
    troom.init_col(2, "Tr2", "%.4lf");
    troom.init_col(3, "Tr3", "%.4lf");
    tsoil.init();
    tsoil.init_col(0, "Time", "%.1lf");
    tsoil.init_col(1, "Ts1", "%.4lf");
    tsoil.init_col(2, "Ts2", "%.4lf");
    tsoil.init_col(3, "TS3", "%.4lf");
    tsoil.init_col(4, "Ts4", "%.4lf");
    tsoil.init_col(5, "Ts5", "%.4lf");
    tsoil.init_col(6, "Ts6", "%.4lf");
    tsoil.init_col(7, "Ts7", "%.4lf");
    tsoil.init_col(8, "TS8", "%.4lf");
    tsoil.init_col(9, "TS9", "%.4lf");
    tsoil.init_col(10, "Ts10", "%.4lf");
    tsoil.init_col(11, "Ts11", "%.4lf");
    tcells.init();
    tcells.init_col(0, "Time", "%.1lf");
    tcells.init_col(1, "T_MB");
    tcells.init_col(2, "TCO2e1");
    tcells.init_col(3, "TCO2e2");
    tcells.init_col(4, "TCO2p");
    cpu.init();
    cpu.init_col(0, "Time");
    cpu.init_col(1, "CPU_Pct");
    cpu.init_col(2, "Disk");
    cpu.init_col(3, "TDrift");
    setpt.init();
    setpt.init_col(0, "Time", "%.1lf");
    setpt.init_col(1, "Pman_SP");
    setpt.init_col(2, "PrCO2p_SP");
    setpt.init_col(3, "FlCO2p_SP");
    setpt.init_col(4, "PrCO2e1_SP");
    setpt.init_col(5, "PrCO2e2_SP");
    setpt.init_col(6, "PrCO_SP");
    setpt.init_col(7, "fcNO_NOx_SP");
    setpt.init_col(8, "fcNO2_NOx_SP");
    setpt.init_col(9, "fc_CO2e_SP");
    setpt.init_col(10, "fcNO_NOy_SP");
    setpt.init_col(11, "fcEff_NOy_SP");
    setpt.init_col(12, "fcZer_NOy_SP");
    setpt.init_col(13, "FlNOx_SP");
    setpt.init_col(14, "FlNOy_SP");
    setpt.init_col(15, "FlCO2e3_SP");
    setpt.init_col(16, "FlCO_SP");
  }
%}
TM INITFUNC initialize();
{
  sonic1.set_time(dtime()+ext_delta);
  sonic1.set_col(1, text(ueddy1));
  sonic1.set_col(2, text(veddy1));
  sonic1.set_col(3, text(weddy1));
  sonic1.set_col(4, text(Teddy1));
  sonic1.set_col(5, text(sdev_stale1));
  sonic1.set_col(6, text(sdrv_stale1));
}
{
  sonic2.set_time(dtime()+ext_delta);
  sonic2.set_col(1, text(ueddy2));
  sonic2.set_col(2, text(veddy2));
  sonic2.set_col(3, text(weddy2));
  sonic2.set_col(4, text(Teddy2));
  sonic2.set_col(5, text(sdev_stale2));
  sonic2.set_col(6, text(sdrv_stale2));
}
{
  eddy1.set_time(dtime()+ext_delta);
  eddy1.set_col(1, convert(vCO2e1));
  eddy1.set_col(2, convert(vH2Oe1));
}
{
  eddy2.set_time(dtime()+ext_delta);
  eddy2.set_col(1, convert(vCO2e2));
  eddy2.set_col(2, convert(vH2Oe2));
}
{
  eddyO3.set_time(dtime()+ext_delta);
  eddyO3.set_col(1, convert(vO3ed));
}
{
  counts.set_time(dtime()+ext_delta);
  counts.set_col(1, text(NOx));
  counts.set_col(2, text(NOy));
  counts.set_col(3, text(CtStat));
}
{
  status.set_time(dtime()+ext_delta);
  status.set_col(1, convert(DSt0));
  status.set_col(2, convert(DSt1));
  status.set_col(3, convert(DSt4));
  status.set_col(4, convert(DSt5));
  status.set_col(5, convert(Dst6));
  status.set_col(6, text(SolSt));
}
{
  pressures.set_time(dtime()+ext_delta);
  pressures.set_col(1, text(Pamb));
  pressures.set_col(2, text(Pman));
  pressures.set_col(3, text(PrCO2p));
  pressures.set_col(4, text(PrNOx));
  pressures.set_col(5, text(PrNOy));
  pressures.set_col(6, text(PrCO2e1));
  pressures.set_col(7, text(PrCO2e2));
  pressures.set_col(8, text(PrCO));
}
{
  flows.set_time(dtime()+ext_delta);
  flows.set_col(1, convert(FlowT));
  flows.set_col(2, convert(FlCO2p));
  flows.set_col(3, convert(FlNOx));
  flows.set_col(4, convert(FlO3_NOx));
  flows.set_col(5, convert(fcNO_NOx));
  flows.set_col(6, convert(fcNO2_NOx));
  flows.set_col(7, convert(FlNOy));
  flows.set_col(8, convert(fcNO_NOy));
  flows.set_col(9, convert(fcEff_NOy));
  flows.set_col(10, convert(fcZer_NOy));
  flows.set_col(11, convert(FlO3_NOy));
  flows.set_col(12, convert(FlCO2e1));
  flows.set_col(13, convert(FlCO2e2));
  flows.set_col(14, convert(FlCO2e3));
  flows.set_col(15, convert(fc_CO2e));
  flows.set_col(16, convert(FlCO));
}
{
  profile.set_time(dtime()+ext_delta);
  profile.set_col(1, convert(vCO2prf));
  profile.set_col(2, convert(vO3prf));
  profile.set_col(3, convert(vCO));
}
{
  radiation.set_time(dtime()+ext_delta);
  radiation.set_col(1, convert(Rnet));
  radiation.set_col(2, convert(PPFD_top));
  radiation.set_col(3, convert(PPFD_mid));
  radiation.set_col(4, convert(PPFD_gnd));
  radiation.set_col(5, convert(PPFD_ref));
  radiation.set_col(6, convert(PPFD_t));
  radiation.set_col(7, convert(PPFD_d));
  radiation.set_col(8, convert(Rnet_cal));
  radiation.set_col(9, convert(PPFD_cal));
}
{
  RH.set_time(dtime()+ext_delta);
  RH.set_col(1, text(RH1));
  RH.set_col(2, text(RH2));
  RH.set_col(3, text(RH3));
  RH.set_col(4, text(RH4));
  RH.set_col(5, text(RH5));
  RH.set_col(6, text(RH6));
  RH.set_col(7, text(RH7));
  RH.set_col(8, text(RH8));
  RH.set_col(9, text(RH9));
  RH.set_col(10, text(RH10));
}
{
  tair.set_time(dtime()+ext_delta);
  tair.set_col(1, convert(Ta1));
  tair.set_col(2, convert(Ta2));
  tair.set_col(3, convert(Ta3));
  tair.set_col(4, convert(Ta4));
  tair.set_col(5, convert(Ta5));
  tair.set_col(6, convert(Ta6));
  tair.set_col(7, convert(Ta7));
  tair.set_col(8, convert(Ta8));
  tair.set_col(9, convert(Ta9));
  tair.set_col(10, convert(Ta10));
  tair.set_col(11, convert(Tcal));
}
{
  troom.set_time(dtime()+ext_delta);
  troom.set_col(1, convert(Tr1));
  troom.set_col(2, convert(Tr2));
  troom.set_col(3, convert(Tr3));
}
{
  tsoil.set_time(dtime()+ext_delta);
  tsoil.set_col(1, convert(Ts1));
  tsoil.set_col(2, convert(Ts2));
  tsoil.set_col(3, convert(TS3));
  tsoil.set_col(4, convert(Ts4));
  tsoil.set_col(5, convert(Ts5));
  tsoil.set_col(6, convert(Ts6));
  tsoil.set_col(7, convert(Ts7));
  tsoil.set_col(8, convert(TS8));
  tsoil.set_col(9, convert(TS9));
  tsoil.set_col(10, convert(Ts10));
  tsoil.set_col(11, convert(Ts11));
}
{
  tcells.set_time(dtime()+ext_delta);
  tcells.set_col(1, text(T_MB));
  tcells.set_col(2, text(TCO2e1));
  tcells.set_col(3, text(TCO2e2));
  tcells.set_col(4, text(TCO2p));
}
{
  cpu.set_time(dtime()+ext_delta);
  cpu.set_col(1, text(CPU_Pct));
  cpu.set_col(2, text(Disk));
  cpu.set_col(3, text(TDrift));
}
{
  setpt.set_time(dtime()+ext_delta);
  setpt.set_col(1, text(Pman_SP));
  setpt.set_col(2, text(PrCO2p_SP));
  setpt.set_col(3, text(FlCO2p_SP));
  setpt.set_col(4, text(PrCO2e1_SP));
  setpt.set_col(5, text(PrCO2e2_SP));
  setpt.set_col(6, text(PrCO_SP));
  setpt.set_col(7, text(fcNO_NOx_SP));
  setpt.set_col(8, text(fcNO2_NOx_SP));
  setpt.set_col(9, text(fc_CO2e_SP));
  setpt.set_col(10, text(fcNO_NOy_SP));
  setpt.set_col(11, text(fcEff_NOy_SP));
  setpt.set_col(12, text(fcZer_NOy_SP));
  setpt.set_col(13, text(FlNOx_SP));
  setpt.set_col(14, text(FlNOy_SP));
  setpt.set_col(15, text(FlCO2e3_SP));
  setpt.set_col(16, text(FlCO_SP));
}
